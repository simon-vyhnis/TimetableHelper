@page "/rooms"
@using Microsoft.EntityFrameworkCore
@using TimetableHelper.Components.Widgets
@using TimetableHelper.Models
@inject IDbContextFactory<TimetableHelper.Data.TimetableHelperContext> DbFactory
@inject NavigationManager NavigationManager
<PageTitle>Učebny</PageTitle>
<div class="row">
    <div class="col-auto">
        <h2>Učebny</h2>
    </div>
    <div class="col-auto">
        <button @onclick="OpenAddModal" class="btn btn-primary"><i class="bi bi-plus-square-fill"></i> Přidat učebnu</button>
    </div>
</div>
@if (rooms == null)
{
    <p>Načítání...</p>
}
else if (rooms.Count() == 0)
{
    <p>Zatím nebyly přidány žádné učebny. Pro přidání použijte tlačítko výše.</p>
}
else
{
    <table class="table table-striped table-bordered table-hover">
        <thead>
            <tr>
                <th>Název</th>
                <th>Zkratka</th>
                <th>Kapacita</th>
                <th class="button-col"></th>
                <th class="button-col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var room in rooms)
            {
                <tr>
                    <td>@room.Name</td>
                    <td>@room.ShortName</td>
                    <td>@room.Capacity</td>
                    <td class="button-col">
                        @if (editedRoom == room.Id)
                        {
                            <button @onclick="SaveChanges" class="btn btn-primary low-btn"><i class="bi bi-floppy-fill"></i></button>
                        }
                        else
                        {
                            <button @onclick="(()=>editedRoom = room.Id)" class="btn btn-primary low-btn"><i class="bi bi-pencil-square"></i></button>
                        }
                    </td>
                    <td class="button-col">
                        <button @onclick="(()=>editedRoom = room.Id)" class="btn btn-primary low-btn"><i class="bi bi-trash-fill"></i></button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<CascadingValue Value="@newRoom">
    <AddModal @ref=modal SaveMethod="AddRoom">
        <Title>Přidat učebnu</Title>
        <Body>
            <div class="mb-3">
                <label>
                    Název učebny
                    <input class="form-control" @bind="newRoom.Name" />
                </label>
            </div>
            <div class="mb-3">
                <label>
                    Zkratka
                    <input class ="form-control" @bind="newRoom.ShortName" />
                </label>
            </div>
            <div class="mb-3">
                <label>
                    Kapacita
                    <input class ="form-control" @bind="newRoom.Capacity" />
                </label>
            </div>
        </Body>
    </AddModal>
</CascadingValue>

@code {
    private List<Room>? rooms;
    private AddModal modal;
    public Room newRoom = new Room();
    private int? editedRoom = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = DbFactory.CreateDbContext();
        rooms = await context.Room.ToListAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void OpenAddModal()
    {
        newRoom = new Room();
        modal.Open();
    }

    private async void AddRoom(object body)
    {
        using var context = DbFactory.CreateDbContext();
        await context.Room.AddAsync(newRoom);
        context.SaveChanges();
        modal.Close();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async Task SaveChanges()
    {
        using var context = DbFactory.CreateDbContext();
        context.Update(rooms.Find(r => r.Id == editedRoom));
        await context.SaveChangesAsync();
        await InvokeAsync(() => editedRoom = null);
        await InvokeAsync(LoadData);
    }
}
    
