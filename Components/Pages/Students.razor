@page "/students"
@using Microsoft.EntityFrameworkCore
@using TimetableHelper.Components.Widgets
@using TimetableHelper.Models
@inject IDbContextFactory<TimetableHelper.Data.TimetableHelperContext> DbFactory
@inject NavigationManager NavigationManager
<PageTitle>Studenti</PageTitle>
<div class="row">
    <div class="col">
        <h2>Studenti</h2>
    </div>
    <div class="col">
        <button @onclick="OpenAddModal" class="btn btn-primary"><i class="bi bi-person-plus-fill"></i> Přidat studenta</button>
    </div>
</div>
@if (students == null)
{
    <p>Načítání...</p>
}
else if (students.Count() == 0)
{
    <p>Zatím nebyli přidáni žádní studenti. Pro přidání použijte tlačítko výše.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Jméno</th>
                <th>Třída</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>
                        @if (editedStudent == student.Id)
                        {
                            <label>
                                Ročník
                                <input class="form-control" @bind-value="student.Name" />
                            </label>
                        }
                        else
                        {
                            <p>@student.Name</p>
                        }
                    </td>
                    <td>@student?.Class?.Name</td>
                    <td>
                        @if (editedStudent == student.Id)
                        {
                            <button @onclick="SaveChanges" class="btn btn-primary"><i class="bi bi-floppy-fill"></i> Uložit</button>
                        }
                        else
                        {
                            <button @onclick="(()=>editedStudent = student.Id)" class="btn btn-primary"><i class="bi bi-pencil-square"></i> Upravit</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<CascadingValue Value="@newStudent">
    <AddModal @ref=modal SaveMethod="AddStudent">
        <Title>Přidat studenta</Title>
        <Body>
            <div class="mb-3">
                <label>
                    Jméno
                    <input class="form-control" @bind="newStudent.Name" />
                </label>
            </div>
        </Body>
    </AddModal>
</CascadingValue>

@code {
    List<Student>? students;
    private AddModal modal;
    private int? editedStudent = null;
    public Student newStudent = new Student();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = DbFactory.CreateDbContext();
        students = await context.Student.ToListAsync();
        await InvokeAsync(StateHasChanged);
    }

    private void OpenAddModal()
    {
        newStudent = new Student();
        modal.Open();
    }

    private async void AddStudent(object body)
    {
        using var context = DbFactory.CreateDbContext();
        await context.Student.AddAsync(newStudent);
        await context.SaveChangesAsync();
        await InvokeAsync(modal.Close);
        await InvokeAsync(LoadData);
    }

    private async void SaveChanges()
    {
        using var context = DbFactory.CreateDbContext();
        context.Update(students.Find(s => s.Id == editedStudent));
        await context.SaveChangesAsync();
        await InvokeAsync(()=>editedStudent = null);
        await InvokeAsync(LoadData);
    }
}
