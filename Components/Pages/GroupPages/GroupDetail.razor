@page "/group/"
@using Microsoft.EntityFrameworkCore
@using TimetableHelper.Components.Widgets
@using TimetableHelper.Models
@inject IDbContextFactory<TimetableHelper.Data.TimetableHelperContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Detail třídy</PageTitle>

<div>
    @if (clas is null)
    {
        <p><em>Načítání...</em></p>
    }
    else {
        <div class="row">
            <div class="col-auto">
                @if (editMode)
                {
                    <label>
                        Název třídy
                        <input class="form-control" @bind-value="clas.Name" />
                    </label>
                }
                else
                {
                    <h2>Třída @clas.Name</h2>
                }
            </div>
            <div class="col-auto">
                @if (editMode)
                {
                    <button class="btn btn-primary" @onclick="SaveData"><i class="bi bi-floppy-fill"/> Uložit úpravy</button>
                }
                else
                {
                    <button class="btn btn-primary" @onclick="(()=>editMode=true)"><i class="bi bi-pencil-square"/> Upravit</button>
                }
            </div>
        </div>
        <hr />
        if (editMode)
        {
            <label>Ročník
                <input class="form-control" @bind-value="clas.Grade"/>
            </label>
        }
        else
        {
            <p>Ročník: @clas.Grade.</p>
        }
        <div class="row">
            <div class="col-auto">
                <h3>Studenti</h3>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="(()=>modal.Open(clas.Students))"><i class="bi bi-person-plus-fill" /> Přiřadit studenty</button>
            </div>
        </div>
        @if(clas.Students.Count > 0)
        {
            <table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr>
                        <th>Jméno</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in clas.Students)
                    {
                        <tr>
                            <td>@student.Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Zatím do této třídy nebyli přiřazeni žádní studenti.</p>
        }
        <div class="row">
            <div class="col-auto">
                <h3>Předměty</h3>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="(()=>modal.Open(clas.Students))"><i class="bi bi-plus-square-fill" /> Přidat předmět</button>
            </div>
        </div>
        <div class="row">
            <div class="col-auto">
                <h3>Skupiny</h3>
            </div>
            <div class="col-auto">
                <button class="btn btn-primary" @onclick="(()=>modal.Open(clas.Students))"><i class="bi bi-plus-square-fill" /> Přidat skupinu</button>
            </div>
        </div>
    }
</div>
<StudentsModal @ref=modal SaveMethod="AddStudents"/>

@code {
    private Class? clas;
    private StudentsModal modal;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        using var context = DbFactory.CreateDbContext();
        clas = await context.Class.Include(c => c.Students).FirstOrDefaultAsync(m => m.Id == Id);

        if (clas is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        await InvokeAsync(StateHasChanged);
    }

    private bool editMode = false;
    protected async Task SaveData()
    {
        using var context = DbFactory.CreateDbContext();
        context.Class.Update(clas);
        await context.SaveChangesAsync();
        await InvokeAsync(() => editMode = false);
        await InvokeAsync(LoadData);
    }

    private async void AddStudents(List<int> selectedStudentIds)
    {
        using var context = DbFactory.CreateDbContext();
        var students = await context.Student.ToListAsync();
        foreach(var student in students)
        {
            if(selectedStudentIds.Contains(student.Id))
            {
                student.ClassId = clas.Id;
            }
            else if(student.ClassId == clas.Id)
            {
                student.ClassId = null;
            }
        }
        await context.SaveChangesAsync();
        await InvokeAsync(()=>modal.Close());
        await InvokeAsync(LoadData);
    }
}
